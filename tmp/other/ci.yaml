name: CI
on:
  pull_request:
    paths:
      - '**'
      - '!/*.md'
      - '!/docs/**'
      - "!/LICENSE-*"
  push:
    branches:
      - main
    paths:
      - '**'
      - '!/*.md'
      - '!/docs/**'
      - "!/LICENSE-*"
jobs:
  ci:
    name: CI
    needs: [ test,rustfmt,clippy ]
    if: github.repository == '0x727/ObserverWard' && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: exit 0
  test:
    name: Test
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        rust: [ "nightly" ]
    continue-on-error: ${{ matrix.rust != 'nightly' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo test --no-run --workspace --all-features
      - name: Default features
        run: cargo test --workspace
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          # Not MSRV because its harder to jump between versions and people are
          # more likely to have nightly
          toolchain: nightly
          profile: minimal
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - name: Check formatting
        run: cargo fmt --all -- --check
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.58.1  # MSRV
          profile: minimal
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings --allow deprecated
